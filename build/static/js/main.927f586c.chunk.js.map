{"version":3,"sources":["Loader.js","components/AutoPie.jsx","components/AutoPies.jsx","components/ExecutionStatusBar.jsx","components/Metric.jsx","components/Metrics.jsx","components/AutoHeader.jsx","components/ExecutionStatusHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["total_automated_tests","total_missing_tests_count","metadata","require","standard_labels","extensions_labels","ps_extensions_active_labels","ps_extensions_retired_labels","AutoPie","props","state","numAutomatedData","type","title","legendPosition","onclick","bind","evt","element","length","console","log","chart","labelClicked","this","index","window","open","className","data","options","pointHitDetectionRadius","plugins","tooltips","mode","intersect","legend","display","position","text","fontSize","font","size","weight","lineHeight","maintainAspectRatio","responsive","onClick","Component","fixVersion","std_lbls","ext_lbls","ps1_lbls","ps2_lbls","all_labels","concat","lblsToDisplay","removeTestCaseFromLabel","std_to_auto","ext_to_auto","ps1_to_auto","ps2_to_auto","std_to_cycle","ext_to_cycle","ps1_to_cycle","ps2_to_cycle","std_to_status","ext_to_status","ps1_to_status","ps2_to_status","ext_to_cycle_adhoc","ext_to_status_adhoc","ps1_to_cycle_adhoc","ps1_to_status_adhoc","ps2_to_cycle_adhoc","ps2_to_status_adhoc","std_to_cycle_adhoc","std_to_status_adhoc","label_to_failed_tests_release","totalAutoPerLabel","allAuto","Set","allCycle","label","issue","add","push","allallAuto","includes","getTotalAutomatedTests","executionStatusPerLabelRelease","executionStatusPerLabelAdhoc","nonAdhocFailedTests","status_to_nums","allCycledIssuesRelease","allCycledIssuesAdhoc","statuses","all_adhoc_issues","nonAdhocFails","label_to_execution_status_list","backgroundColor","label_to_failed_non_adhoc_issues","num_failed_non_adhoc_per_label","Object","keys","slice","dynamicColorsList","lst","colorList","i","r","Math","floor","random","g","b","getNumAutomatedTestsForAllLabel","label_to_automated_issue_ids","numAutomated","labelLst","outLst","AutoPies","standardNumAutomatedData","extensionsNumAutomatedData","psExtensionsActiveNumAutomatedData","psExtensionsRetiredNumAutomatedData","setState","labels","datasets","borderWidth","getNumAutomatedData","class","currentCycle","ExecutionStatusBar","executionStatusData","totalAutomatedTestsPerLabel","onToggle1","onToggle2","onToggle3","makeBtnActive","getMissingTests","id","btns","document","getElementsByClassName","classList","remove","getElementById","automatedIssues","cycledIssues","missingTests","issueId","missingIssuesTuple","statusInd","datasetIndex","style","tooltip","callbacks","footer","context","undefined","indexOfLabelHovered","dataIndex","x","stacked","barPercentage","ticks","autoSkip","y","Metric","metricName","metricValue","Metrics","AutoHeader","ExecutionStatusHeader","App","marginBottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.927f586c.chunk.js","sourcesContent":["let metadata = require('./data/metadata.json');\nlet fixVersion = metadata[\"fixVersion\"];\nlet std_lbls = metadata[\"standard\"];\nlet ext_lbls = metadata[\"extensions\"];\nlet ps1_lbls = metadata[\"ps_extensions_active\"];\nlet ps2_lbls = metadata[\"ps_extensions_retired\"];\nlet all_labels = std_lbls.concat(ext_lbls).concat(ps1_lbls).concat(ps2_lbls);\nlet lblsToDisplay = removeTestCaseFromLabel(std_lbls).concat(removeTestCaseFromLabel(ext_lbls)).concat(removeTestCaseFromLabel(ps1_lbls)).concat(removeTestCaseFromLabel(ps2_lbls));\n\nlet std_to_auto = require('./data/standard_label_to_automated_issue_ids.json');\nlet ext_to_auto = require('./data/extensions_label_to_automated_issue_ids.json');\nlet ps1_to_auto = require('./data/ps_extensions_active_label_to_automated_issue_ids.json');\nlet ps2_to_auto = require('./data/ps_extensions_retired_label_to_automated_issue_ids.json');\nlet std_to_cycle = require('./data/standard_label_to_cycled_issue_ids.json');\nlet ext_to_cycle = require('./data/extensions_label_to_cycled_issue_ids.json');\nlet ps1_to_cycle = require('./data/ps_extensions_active_label_to_cycled_issue_ids.json');\nlet ps2_to_cycle = require('./data/ps_extensions_retired_label_to_cycled_issue_ids.json');\nlet std_to_status = require('./data/standard_label_to_execution_statuses.json');\nlet ext_to_status = require('./data/extensions_label_to_execution_statuses.json');\nlet ps1_to_status = require('./data/ps_extensions_active_label_to_execution_statuses.json');\nlet ps2_to_status = require('./data/ps_extensions_retired_label_to_execution_statuses.json');\nlet ext_to_cycle_adhoc = require('./data/extensions_label_to_cycled_issue_ids_adhoc.json');\nlet ext_to_status_adhoc = require('./data/extensions_label_to_execution_statuses_adhoc.json');\nlet ps1_to_cycle_adhoc = require('./data/ps_extensions_active_label_to_cycled_issue_ids_adhoc.json');\nlet ps1_to_status_adhoc = require('./data/ps_extensions_active_label_to_execution_statuses_adhoc.json');\nlet ps2_to_cycle_adhoc = require('./data/ps_extensions_retired_label_to_cycled_issue_ids.json');\nlet ps2_to_status_adhoc = require('./data/ps_extensions_retired_label_to_execution_statuses_adhoc.json');\nlet std_to_cycle_adhoc = require('./data/standard_label_to_cycled_issue_ids_adhoc.json');\nlet std_to_status_adhoc = require('./data/standard_label_to_execution_statuses_adhoc.json');\nlet label_to_failed_tests_release = require('./data/label_to_failed_tests_release.json');\n\nlet totalAutoPerLabel = []; // list of total automated test for all labels\nlet allAuto = new Set(); // list of all unique automated issues\nlet allCycle = new Set(); // list of all unique cycled issues \nlet total_automated_tests, total_missing_tests_count;\n\n\nfor (const label of std_lbls) {\n  for (const issue of std_to_auto[label]) allAuto.add(issue);\n  for (const issue of std_to_cycle[label]) allCycle.add(issue);\n  totalAutoPerLabel.push(std_to_auto[label].length);\n}\nfor (const label of ext_lbls) {\n  for (const issue of ext_to_auto[label]) allAuto.add(issue);\n  for (const issue of ext_to_cycle[label]) allCycle.add(issue);\n  totalAutoPerLabel.push(ext_to_auto[label].length);\n}\nfor (const label of ps1_lbls) {\n  for (const issue of ps1_to_auto[label]) allAuto.add(issue);\n  for (const issue of ps1_to_cycle[label]) allCycle.add(issue);\n  totalAutoPerLabel.push(ps1_to_auto[label].length);\n}\nfor (const label of ps2_lbls) {\n  for (const issue of ps2_to_auto[label]) allAuto.add(issue);\n  for (const issue of ps2_to_cycle[label]) allCycle.add(issue);\n  totalAutoPerLabel.push(ps2_to_auto[label].length);\n}\n\ntotal_automated_tests = getTotalAutomatedTests();\ntotal_missing_tests_count = allAuto.size - allCycle.size; // difference between lengths of allAuto set and allCycledIssues set\n\nlet status_to_nums = {\n    \"release\": {\n        \"PASS\": [], \"FAIL\": [], \"WIP\": [], \"CONDITIONAL PASS\": [], \"UNEXECUTED\": [], \"BLOCKED\": [], \"NOT IN CYCLE\": [], \"CRC FAILURE\": []\n    }, \"adhoc\": {\n        \"PASS\": [], \"FAIL\": [], \"WIP\": [], \"CONDITIONAL PASS\": [], \"UNEXECUTED\": [], \"BLOCKED\": [], \"CRC FAILURE\": []\n    }  \n}\n\n// get total automated test counts and num automated per label\nlet allCycledIssuesRelease = new Set(); // list of all unique cycled issues no overlap\nlet allCycledIssuesAdhoc = new Set(); // list of all unique cycled issues no overlap\nlet executionStatusPerLabelRelease;\nlet executionStatusPerLabelAdhoc;\nlet nonAdhocFailedTests; // to obe graphed\nlet statuses = [\"PASS\", \"FAIL\", \"CRC FAILURE\", \"WIP\", \"CONDITIONAL PASS\", \"UNEXECUTED\", \"BLOCKED\", \"NOT IN CYCLE\"];\nlet all_adhoc_issues = []; //to check failed tests not added to adhoc\nlet nonAdhocFails = []; // maps label to 1782&38903&283 -> for url\nvar label_to_execution_status_lists = [std_to_status, ext_to_status, ps1_to_status, ps2_to_status];\n\nfor (const label_to_execution_status_list of label_to_execution_status_lists) {\n  for (const label in label_to_execution_status_list) {\n    status_to_nums[\"release\"][\"PASS\"].push(label_to_execution_status_list[label][\"PASS\"]);\n    status_to_nums[\"release\"][\"FAIL\"].push(label_to_execution_status_list[label][\"FAIL\"]);\n    status_to_nums[\"release\"][\"CRC FAILURE\"].push(label_to_execution_status_list[label][\"CRC FAILURE\"]);\n    status_to_nums[\"release\"][\"WIP\"].push(label_to_execution_status_list[label][\"WIP\"]);\n    status_to_nums[\"release\"][\"CONDITIONAL PASS\"].push(label_to_execution_status_list[label][\"CONDITIONAL PASS\"]);\n    status_to_nums[\"release\"][\"UNEXECUTED\"].push(label_to_execution_status_list[label][\"UNEXECUTED\"]);\n    status_to_nums[\"release\"][\"BLOCKED\"].push(label_to_execution_status_list[label][\"BLOCKED\"]);\n    status_to_nums[\"release\"][\"NOT IN CYCLE\"].push(label_to_execution_status_list[label][\"NOT IN CYCLE\"]);\n  }\n}\nvar label_to_execution_status_lists = [std_to_status_adhoc, ext_to_status_adhoc, ps1_to_status_adhoc, ps2_to_status_adhoc];\nfor (const label_to_execution_status_list of label_to_execution_status_lists) {\n  for (const label in label_to_execution_status_list) {\n    status_to_nums[\"adhoc\"][\"PASS\"].push(label_to_execution_status_list[label][\"PASS\"]);\n    status_to_nums[\"adhoc\"][\"FAIL\"].push(label_to_execution_status_list[label][\"FAIL\"]);\n    status_to_nums[\"adhoc\"][\"CRC FAILURE\"].push(label_to_execution_status_list[label][\"CRC FAILURE\"]);\n    status_to_nums[\"adhoc\"][\"WIP\"].push(label_to_execution_status_list[label][\"WIP\"]);\n    status_to_nums[\"adhoc\"][\"CONDITIONAL PASS\"].push(label_to_execution_status_list[label][\"CONDITIONAL PASS\"]);\n    status_to_nums[\"adhoc\"][\"UNEXECUTED\"].push(label_to_execution_status_list[label][\"UNEXECUTED\"]);\n    status_to_nums[\"adhoc\"][\"BLOCKED\"].push(label_to_execution_status_list[label][\"BLOCKED\"]);\n  }\n}\nfor (const label of std_lbls) {\n  for (const issue of std_to_cycle[label]) allCycledIssuesRelease.add(issue);\n  for (const issue of std_to_cycle_adhoc[label]) allCycledIssuesAdhoc.add(issue); \n  for (const issue of std_to_cycle_adhoc[label]) if (!(all_adhoc_issues.includes(issue))) all_adhoc_issues.push(issue);\n}\n\nfor (const label of ext_lbls) {\n  for (const issue of ext_to_cycle[label]) allCycledIssuesRelease.add(issue);\n  for (const issue of ext_to_cycle_adhoc[label]) allCycledIssuesAdhoc.add(issue); \n  for (const issue of ext_to_cycle_adhoc[label]) if (!(all_adhoc_issues.includes(issue))) all_adhoc_issues.push(issue);\n}\n\nfor (const label of ps1_lbls) {\n  for (const issue of ps1_to_cycle[label]) allCycledIssuesRelease.add(issue);\n  for (const issue of ps1_to_cycle_adhoc[label]) allCycledIssuesAdhoc.add(issue); \n  for (const issue of ps1_to_cycle_adhoc[label]) if (!(all_adhoc_issues.includes(issue))) all_adhoc_issues.push(issue);\n}\nfor (const label of ps2_lbls) {\n  for (const issue of ps2_to_cycle[label]) allCycledIssuesRelease.add(issue);\n  for (const issue of ps2_to_cycle_adhoc[label]) allCycledIssuesAdhoc.add(issue);\n  for (const issue of ps2_to_cycle_adhoc[label]) if (!(all_adhoc_issues.includes(issue))) all_adhoc_issues.push(issue);\n}\n\nexecutionStatusPerLabelRelease = [\n  { label: 'PASS', data: status_to_nums[\"release\"][\"PASS\"], backgroundColor: '#75B000' },\n  { label: 'FAIL', data: status_to_nums[\"release\"][\"FAIL\"], backgroundColor: '#CC3300' },\n  { label: 'CRC Failure', data: status_to_nums[\"release\"][\"CRC Failure\"], backgroundColor: '#ff6600' },\n  { label: 'WIP', data: status_to_nums[\"release\"][\"WIP\"], backgroundColor: '#F2B000' },\n  { label: 'CONDITIONAL PASS', data: status_to_nums[\"release\"][\"CONDITIONAL PASS\"], backgroundColor: '#ccff00' },\n  { label: 'UNEXECUTED', data: status_to_nums[\"release\"][\"UNEXECUTED\"], backgroundColor: '#A0A0A0' },\n  { label: 'BLOCKED', data: status_to_nums[\"release\"][\"BLOCKED\"], backgroundColor: '#6693B0' },\n  { label: 'NOT IN CYCLE', data: status_to_nums[\"release\"][\"NOT IN CYCLE\"], backgroundColor: '#A667D2' },\n]\nexecutionStatusPerLabelAdhoc = [\n  { label: 'PASS', data: status_to_nums[\"adhoc\"][\"PASS\"], backgroundColor: '#75B000' },\n  { label: 'FAIL', data: status_to_nums[\"adhoc\"][\"FAIL\"], backgroundColor: '#CC3300' },\n  { label: 'CRC Failure', data: status_to_nums[\"adhoc\"][\"CRC FAILURE\"], backgroundColor: '#ff6600' },\n  { label: 'WIP', data: status_to_nums[\"adhoc\"][\"WIP\"], backgroundColor: '#F2B000' },\n  { label: 'CONDITIONAL PASS', data: status_to_nums[\"adhoc\"][\"CONDITIONAL PASS\"], backgroundColor: '#ccff00' },\n  { label: 'UNEXECUTED', data: status_to_nums[\"adhoc\"][\"UNEXECUTED\"], backgroundColor: '#A0A0A0' },\n  { label: 'BLOCKED', data: status_to_nums[\"adhoc\"][\"BLOCKED\"], backgroundColor: '#6693B0' }\n]\n\n//get list of all tests added to adhoc\nvar label_to_failed_non_adhoc_issues = {}\nvar num_failed_non_adhoc_per_label = []\nfor (const label of Object.keys(label_to_failed_tests_release)) {\n  label_to_failed_non_adhoc_issues[label] = []\n  nonAdhocFails[label] = ''\n  for (const issue of label_to_failed_tests_release[label]) {\n    if (!all_adhoc_issues.includes(issue)) {\n      label_to_failed_non_adhoc_issues[label].push(issue);\n      nonAdhocFails[label] = nonAdhocFails[label] + issue + \"%2C\";\n    }\n  }\n  //remove the last &\n  if (nonAdhocFails[label].includes(\"%2C\"))\n    nonAdhocFails[label] = nonAdhocFails[label].slice(0, nonAdhocFails[label].length - 3)\n  num_failed_non_adhoc_per_label.push(label_to_failed_non_adhoc_issues[label].length)\n}\nnonAdhocFailedTests = [\n  {\n    label: 'NON ADHOC FAIL or CRC FAIL', data: num_failed_non_adhoc_per_label, backgroundColor: '#ff6666'\n  }\n]\n\n// get total automated tests by summing the number of tests automated for each label (all labels under standard, extensions, ps extensions active and retired)\n// takes into account tests that have multiple labels assigned to them\nfunction getTotalAutomatedTests() {\n  var allallAuto = [];\n  for (const label of std_lbls) {\n    for (const issue of std_to_auto[label]) if (!allallAuto.includes(issue)) allallAuto.push(issue)\n  }\n  for (const label of ext_lbls) {\n    for (const issue of ext_to_auto[label]) {\n      if (!allallAuto.includes(issue)) allallAuto.push(issue)\n    }\n  }\n  for (const label of ps1_lbls) {\n    for (const issue of ps1_to_auto[label]) {\n      if (!allallAuto.includes(issue)) allallAuto.push(issue)\n    }\n  }\n  for (const label of ps2_lbls) {\n    for (const issue of ps2_to_auto[label]) {\n      if (!allallAuto.includes(issue)) allallAuto.push(issue)\n    }\n  }\n  return allallAuto.length;\n}\n\nexport function dynamicColorsList(lst) {\n    var colorList = [];\n    for (var i in lst) {\n        var r = Math.floor(Math.random() * 255);\n        var g = Math.floor(Math.random() * 255);\n        var b = Math.floor(Math.random() * 255);\n        colorList.push(\"rgb(\" + r + \",\" + g + \",\" + b + \")\");\n    }\n    return colorList;\n};\n\nexport function getNumAutomatedTestsForAllLabel(label_to_automated_issue_ids) {\n    var numAutomated = [];\n    for (const label in label_to_automated_issue_ids) numAutomated.push(label_to_automated_issue_ids[label].length);\n    return numAutomated;\n}\n\nexport function removeTestCaseFromLabel(labelLst) {\n    var outLst = []\n    for (const label of labelLst) {\n        if (label.includes('_Test_Cases'))\n        outLst.push(label.slice(0, label.length - 11))\n        else\n        outLst.push(label)\n    }\n    return outLst;\n}\n\nexport { fixVersion, \n        std_lbls, ext_lbls, ps1_lbls, ps2_lbls, all_labels, lblsToDisplay, \n        std_to_auto, ext_to_auto, ps1_to_auto, ps2_to_auto, \n        std_to_cycle, ext_to_cycle, ps1_to_cycle, ps2_to_cycle, \n        std_to_status, ps1_to_status, ps2_to_status, ext_to_status, \n        ext_to_cycle_adhoc, ext_to_status_adhoc, ps1_to_cycle_adhoc, ps1_to_status_adhoc, ps2_to_cycle_adhoc, \n        ps2_to_status_adhoc, std_to_cycle_adhoc ,std_to_status_adhoc, \n        label_to_failed_tests_release,\n        totalAutoPerLabel, allAuto, allCycle, total_automated_tests, total_missing_tests_count, \n        allCycledIssuesRelease, allCycledIssuesAdhoc, all_adhoc_issues, \n        executionStatusPerLabelRelease, executionStatusPerLabelAdhoc, \n        nonAdhocFailedTests, status_to_nums, statuses, nonAdhocFails, label_to_execution_status_lists };\n\n    ","import React, { Component } from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\nlet metadata = require('../data/metadata.json');\r\nlet standard_labels = metadata[\"standard\"];\r\nlet extensions_labels = metadata[\"extensions\"];\r\nlet ps_extensions_active_labels = metadata[\"ps_extensions_active\"];\r\nlet ps_extensions_retired_labels = metadata[\"ps_extensions_retired\"];\r\n\r\nclass AutoPie extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      numAutomatedData: props.numAutomatedData,\r\n      type: props.type,\r\n      title: props.title,\r\n      legendPosition: props.legendPosition\r\n    }\r\n    this.onclick = this.onclick.bind(this);\r\n  }\r\n\r\n  onclick(evt, element) {\r\n    if (element.length > 0) {\r\n      console.log(evt.chart);\r\n      var labelClicked = '';\r\n      if (this.state.type == \"standard\")  \r\n        var labelClicked = standard_labels[element[0].index];\r\n      if (this.state.type == \"extensions\")  \r\n        var labelClicked = extensions_labels[element[0].index];\r\n      if (this.state.type == \"psExtensionsActive\")  \r\n        var labelClicked = ps_extensions_active_labels[element[0].index];\r\n      if (this.state.type == \"psExtensionsRetired\")\r\n        var labelClicked = ps_extensions_retired_labels[element[0].index];\r\n      window.open(\"https://fake/jira/url/to/labels/within/\" + labelClicked + \"/and/status/of/automation/complete\");\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.type, \"col-lg-6 col-md-6 col-xs-6\"}>\r\n        <Pie\r\n          data={this.state.numAutomatedData}\r\n          options={{\r\n            pointHitDetectionRadius: 1,\r\n            plugins: {\r\n              tooltips: {\r\n                mode: 'neareest',\r\n                intersect: false\r\n              },\r\n              legend: {\r\n                display: true,\r\n                position: this.props.legendPosition\r\n              },\r\n              title: {\r\n                display: true,\r\n                text: this.props.title,\r\n                fontSize: 30,\r\n                position: 'left',\r\n                font: {\r\n                  size: 18,\r\n                  weight: 'bold',\r\n                  lineHeight: 1.5,\r\n                },\r\n              },\r\n            },\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            onClick: this.onclick\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default AutoPie;","import React, { Component } from 'react';\nimport AutoPie from './AutoPie'\nimport { std_lbls, ext_lbls, ps1_lbls, ps2_lbls, \n  std_to_auto, ext_to_auto, ps1_to_auto, ps2_to_auto, \n  dynamicColorsList, getNumAutomatedTestsForAllLabel, removeTestCaseFromLabel} from '../Loader.js'\n\nclass AutoPies extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      standardNumAutomatedData: {},\n      extensionsNumAutomatedData: {},\n      psExtensionsActiveNumAutomatedData: {},\n      psExtensionsRetiredNumAutomatedData: {},\n    }\n  }\n\n  getNumAutomatedData() {\n    this.setState({\n      standardNumAutomatedData: {\n        labels: removeTestCaseFromLabel(std_lbls),\n        datasets: [{\n          label: 'Number of tests automated',\n          data: getNumAutomatedTestsForAllLabel(std_to_auto),\n          borderWidth: 0.5,\n          backgroundColor: dynamicColorsList(std_lbls)\n        }]\n      }\n    });\n    this.setState({\n      extensionsNumAutomatedData: {\n        labels: removeTestCaseFromLabel(ext_lbls),\n        datasets: [{\n          label: 'Number of tests automated',\n          data: getNumAutomatedTestsForAllLabel(ext_to_auto),\n          borderWidth: 0.5,\n          backgroundColor: dynamicColorsList(ext_lbls)\n        }]\n      }\n    });\n    this.setState({\n      psExtensionsActiveNumAutomatedData: {\n        labels: removeTestCaseFromLabel(ps1_lbls),\n        datasets: [{\n          label: 'Number of tests automated',\n          data: getNumAutomatedTestsForAllLabel(ps1_to_auto),\n          borderWidth: 0.5,\n          backgroundColor: dynamicColorsList(ps1_lbls)\n        }]\n      }\n    });\n    this.setState({\n      psExtensionsRetiredNumAutomatedData: {\n        labels: removeTestCaseFromLabel(ps2_lbls),\n        datasets: [{\n          label: 'Number of tests automated',\n          data: getNumAutomatedTestsForAllLabel(ps2_to_auto),\n          borderWidth: 0.5,\n          backgroundColor: dynamicColorsList(ps2_lbls)\n        }]\n      }\n    });\n  }\n\n  componentWillMount() {\n    this.getNumAutomatedData();\n  }\n\n  render() {\n    return (\n      <div>\n        <div class=\"row pie\">\n          <AutoPie numAutomatedData={this.state.standardNumAutomatedData} type={\"standard\"} title=\"Standard\" legendPosition=\"right\" />\n          <AutoPie numAutomatedData={this.state.extensionsNumAutomatedData} type={\"extensions\"} title=\"Extensions\" legendPosition=\"right\" />\n        </div>\n        <div class=\"row pie\">\n          <AutoPie numAutomatedData={this.state.psExtensionsActiveNumAutomatedData} type={\"psExtensionsActive\"} title=\"PS Extensions Active\" legendPosition=\"right\" />\n          <AutoPie numAutomatedData={this.state.psExtensionsRetiredNumAutomatedData} type={\"psExtensionsRetired\"} title=\"PS Extension Retired\" legendPosition=\"right\" />\n        </div>\n        <br />\n        <br />\n      </div>\n    )\n  }\n}\n\nexport default AutoPies;","import React, { Component } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { fixVersion, lblsToDisplay, std_lbls, ext_lbls, ps1_lbls, ps2_lbls, all_labels, \r\n          std_to_auto, ext_to_auto, ps1_to_auto, ps2_to_auto, std_to_cycle, ext_to_cycle, ps1_to_cycle, ps2_to_cycle, \r\n          executionStatusPerLabelRelease, executionStatusPerLabelAdhoc, nonAdhocFailedTests,\r\n          statuses, nonAdhocFails } from '../Loader.js';\r\n\r\nlet currentCycle = 'Release Candidate';\r\n\r\nclass ExecutionStatusBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      executionStatusData: {\r\n        labels: lblsToDisplay,\r\n        datasets: executionStatusPerLabelRelease\r\n      },\r\n      totalAutomatedTestsPerLabel: props.totalAutomatedTestsPerLabel,\r\n      position: props.position,\r\n\r\n    }\r\n    this.onToggle1 = this.onToggle1.bind(this);\r\n    this.onToggle2 = this.onToggle2.bind(this);\r\n    this.onToggle3 = this.onToggle3.bind(this);\r\n    this.makeBtnActive = this.makeBtnActive.bind(this);\r\n    this.onclick = this.onclick.bind(this);\r\n    this.getMissingTests = this.getMissingTests.bind(this);\r\n  }\r\n\r\n  makeBtnActive(id) {\r\n    var btns = document.getElementsByClassName(\"btn\");\r\n    for (const btn of btns) btn.classList.remove(\"btn-active\");\r\n    var clickedBtn = document.getElementById(\"release\");\r\n    clickedBtn.classList.add(\"btn-active\");\r\n  }\r\n\r\n  onToggle1() {\r\n    this.setState({\r\n      executionStatusData: {\r\n        labels: lblsToDisplay,\r\n        datasets: executionStatusPerLabelRelease\r\n      },\r\n    });\r\n    currentCycle = 'Release Candidate'\r\n    var btns = document.getElementsByClassName(\"btn\");\r\n    for (const btn of btns) btn.classList.remove(\"btn-active\");\r\n    var clickedBtn = document.getElementById(\"release\");\r\n    clickedBtn.classList.add(\"btn-active\");\r\n  }\r\n  onToggle2() {\r\n    this.setState({\r\n      executionStatusData: {\r\n        labels: lblsToDisplay,\r\n        datasets: executionStatusPerLabelAdhoc\r\n      },\r\n    });\r\n    currentCycle = 'Ad hoc';\r\n    var btns = document.getElementsByClassName(\"btn\");\r\n    for (const btn of btns) btn.classList.remove(\"btn-active\");\r\n    var clickedBtn = document.getElementById(\"adhoc\");\r\n    clickedBtn.classList.add(\"btn-active\");\r\n  }\r\n  onToggle3() {\r\n    this.setState({\r\n      executionStatusData: {\r\n        labels: lblsToDisplay,\r\n        datasets: nonAdhocFailedTests\r\n      },\r\n    });\r\n    currentCycle = 'Non Ad hoc Fails'\r\n    var btns = document.getElementsByClassName(\"btn\");\r\n    for (const btn of btns) btn.classList.remove(\"btn-active\");\r\n    var clickedBtn = document.getElementById(\"non-adhoc-fails\");\r\n    clickedBtn.classList.add(\"btn-active\");\r\n  }\r\n\r\n  getMissingTests(label) {\r\n    // show issues that are mismatching between \"in cycle\" and \"auto complete\"\r\n    let automatedIssues = [], cycledIssues = [], missingTests = [];\r\n    if (std_lbls.includes(label)) {\r\n      automatedIssues = std_to_auto[label];\r\n      cycledIssues = std_to_cycle[label];\r\n    } else if (ext_lbls.includes(label)) {\r\n      automatedIssues = ext_to_auto[label];\r\n      cycledIssues = ext_to_cycle[label];\r\n    } else if (ps1_lbls.includes(label)) {\r\n      automatedIssues = ps1_to_auto[label];\r\n      cycledIssues = ps1_to_cycle[label];\r\n    } else if (ps2_lbls.includes(label)) {\r\n      automatedIssues = ps2_to_auto[label];\r\n      cycledIssues = ps2_to_cycle[label];\r\n    }\r\n    for (let issueId of automatedIssues) {\r\n      if (!cycledIssues.includes(issueId)) {\r\n        missingTests.push(issueId)\r\n      }\r\n    }\r\n    //formate issue ids to be used in the url e.g. (53800%2C46878%2C46877%2C46876%2C46875)\r\n    let missingIssuesTuple = ''\r\n    for (let issue of missingTests)\r\n      missingIssuesTuple += issue + \"%2C\";\r\n    //remove last %2C \r\n    if (missingIssuesTuple.includes(\"%2C\"))\r\n      missingIssuesTuple = missingIssuesTuple.slice(0, missingIssuesTuple.length - 3)\r\n    return missingIssuesTuple;\r\n  }\r\n\r\n  onclick(evt, element) {\r\n    if (element.length > 0) {\r\n      var statusInd = element[0].datasetIndex;\r\n      var label = all_labels[element[0].index];\r\n      //dynamically generate query link -- change current cycle to something else\r\n      if (!(currentCycle == 'Non Ad hoc Fails')) {\r\n        if (statuses[statusInd] != \"NOT IN CYCLE\") {\r\n          window.open(\"https://fake/jira/url/to/labels/\" + label + \"project/release/and/fix/version/\" + fixVersion + \"/and/cycle/name/\" + currentCycle + \"and/execution/statuses/\" + statuses[statusInd] + \"%22&view=list&searchType=basic\");\r\n        } else {\r\n          window.open(\"https://fake/jira/url/to/issue/keys/within/this/list(\" + this.getMissingTests(label) + \")\");\r\n        }\r\n      } else {\r\n        window.open(\"https://fake/jira/url/to/issue/keys/within/this/list(\" + nonAdhocFails[label] + \")\");\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"chart\">\r\n        <button type=\"button\" class=\"btn btn-secondary btn-sm\" style={{ \"margin\": \"5px\" }} onClick={this.onToggle1.bind(this)} id=\"release\">Release Candidate</button>\r\n        <button type=\"button\" class=\"btn btn-secondary btn-sm\" style={{ \"margin\": \"5px\" }} onClick={this.onToggle2.bind(this)} id=\"adhoc\">Ad hoc</button>\r\n        <button type=\"button\" class=\"btn btn-secondary btn-sm\" style={{ \"margin\": \"5px\"}} onClick={this.onToggle3.bind(this)} id=\"non-adhoc-fails\">Non Ad hoc Fails or CRC Fails</button>\r\n        <br/>\r\n        <br/>\r\n        <Bar id=\"executionStatus\"\r\n          data={this.state.executionStatusData}\r\n          options={{\r\n            plugins: {\r\n              tooltip: {\r\n                callbacks: {\r\n                  footer: (context) => {\r\n                    if (this.props.totalAutomatedTestsPerLabel === undefined) { return }\r\n                    let indexOfLabelHovered = context[0].dataIndex;\r\n                    return 'Total: ' + this.props.totalAutomatedTestsPerLabel[indexOfLabelHovered];\r\n\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            title: {\r\n              display: false,\r\n              text: 'Execution Status per Label',\r\n              fontSize: 25\r\n            },\r\n            responsive: true,\r\n            indexAxis: 'y',\r\n            scales: {\r\n              x: {\r\n                stacked: true,\r\n                barPercentage: 0.2,\r\n                ticks: {\r\n                  autoSkip: false\r\n                }\r\n              },\r\n              y: {\r\n                stacked: true,\r\n                ticks: {\r\n                  autoSkip: false\r\n                }\r\n              }\r\n            },\r\n            legend: {\r\n              display: false,\r\n              position: 'bottom'\r\n            },\r\n            onClick: this.onclick\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ExecutionStatusBar;","import React, { Component } from 'react';\r\n\r\nclass Metric extends Component {\r\n  constructor(props) {\r\n    super(props); \r\n    this.state = {\r\n      executionStatusData: props.executionStatusData,\r\n      position: props.position,\r\n      metricName: props.metricName,\r\n      metricValue: props.metricValue\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.position}>\r\n        <h1 className = \"metricVal\" style={{ \"font-size\": \"40px\" }}>{this.props.metricValue}</h1>\r\n        <h2 className = \"metricName\" style={{ \"font-size\": \"20px\" }}>{this.props.metricName}</h2>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Metric;","import React, { Component } from 'react';\nimport Metric from './Metric'\nimport { total_automated_tests, total_missing_tests_count, all_labels } from '../Loader.js'\n\nclass Metrics extends Component {\n  constructor(props) {\n    super(props); \n    this.state = {\n      executionStatusData: props.executionStatusData,\n      position: props.position,\n      metricName: props.metricName,\n      metricValue: props.metricValue\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"metrics\">\n        <Metric position=\"left\" metricName=\"Total Automated Tests\" metricValue={total_automated_tests} />\n        <Metric position=\"right\" metricName={\"Total Tests not in Cycle\"} metricValue={total_missing_tests_count} />\n        <Metric position=\"center\" metricName=\"Total Epics\" metricValue={all_labels.length} />\n      </div>\n    )\n  }\n}\n\nexport default Metrics;","import React, { Component } from 'react';\n\nclass AutoHeader extends Component {\n  render() {\n    return (\n      <div className={this.props.position}>\n        <h1 className=\"title\" style={{ \"padding-bottom\": \"5px\", \"padding-top\": \"100px\" }}>Automation Coverage</h1>\n        <h3 className=\"subtitle\" >Automation Complete Count per Label</h3>\n        <p style={{ \"font-size\": \"18px\", \"margin\": \"50px\", \"font-family\": \"Helvetica\", \"color\": \"#00897b\"}}>Clicking on a pie slice opens a Jira query of all automated tests within the label chosen.</p>\n      </div>\n    )\n  }\n}\n\nexport default AutoHeader;","import React, { Component } from 'react';\n\nlet metadata = require('../data/metadata.json');\nlet fixVersion = metadata[\"fixVersion\"];\n\nclass ExecutionStatusHeader extends Component {\n  render() {\n    return (\n      <div className={this.props.position}>\n        <h1 className=\"title\" style={{ \"padding-bottom\": \"5px\", \"padding-top\": \"150px\" }}>Executions Status per Label</h1>\n        <h3 className=\"subtitle\">Version: {fixVersion} - Cycle: Release Candidate/Ad hoc</h3>\n        <p style={{ \"font-size\": \"12px\" }}>Note: DAP Products, and other product installations are not included in the view as there are no automated tests for them.</p>\n        <p style={{ \"font-size\": \"18px\", \"padding-bottom\": \"50px\", \"font-family\": \"Helvetica\", \"color\": \"#00897b\", \"margin\": \"50px\"}}>\n          Clicking on any portion of the bars opens a Zephyr query with the information chosen.\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default ExecutionStatusHeader;","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport AutoPies from './components/AutoPies'\r\nimport ExecutionStatusBar from './components/ExecutionStatusBar'\r\nimport Metrics from './components/Metrics'\r\nimport AutoHeader from './components/AutoHeader'\r\nimport ExecutionStatusHeader from './components/ExecutionStatusHeader'\r\nimport { totalAutoPerLabel} from './Loader.js'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\" style={{ marginBottom: \"5%\" }}></header>\r\n        <AutoHeader/>\r\n        <Metrics/>\r\n        <AutoPies/>\r\n        \r\n        <ExecutionStatusHeader/>\r\n        <ExecutionStatusBar totalAutoPerLabel={totalAutoPerLabel} />\r\n        <div style={{ \"width\": \"5px\", \"height\": \"1700px\" }}></div>\r\n        <header className=\"App-header footer\"></header>\r\n      </div >\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}